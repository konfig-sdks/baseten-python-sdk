# coding: utf-8

"""
    Baseten management API

    REST API for management of Baseten resources

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from baseten_python_sdk import schemas  # noqa: F401


class ModelV1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A model.
    """


    class MetaOapg:
        required = {
            "development_deployment_id",
            "name",
            "created_at",
            "deployments_count",
            "instance_type_name",
            "id",
            "production_deployment_id",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            name = schemas.StrSchema
            deployments_count = schemas.IntSchema
            production_deployment_id = schemas.StrSchema
            development_deployment_id = schemas.StrSchema
            instance_type_name = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "created_at": created_at,
                "name": name,
                "deployments_count": deployments_count,
                "production_deployment_id": production_deployment_id,
                "development_deployment_id": development_deployment_id,
                "instance_type_name": instance_type_name,
            }
    
    development_deployment_id: MetaOapg.properties.development_deployment_id
    name: MetaOapg.properties.name
    created_at: MetaOapg.properties.created_at
    deployments_count: MetaOapg.properties.deployments_count
    instance_type_name: MetaOapg.properties.instance_type_name
    id: MetaOapg.properties.id
    production_deployment_id: MetaOapg.properties.production_deployment_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployments_count"]) -> MetaOapg.properties.deployments_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["production_deployment_id"]) -> MetaOapg.properties.production_deployment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["development_deployment_id"]) -> MetaOapg.properties.development_deployment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance_type_name"]) -> MetaOapg.properties.instance_type_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "name", "deployments_count", "production_deployment_id", "development_deployment_id", "instance_type_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployments_count"]) -> MetaOapg.properties.deployments_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["production_deployment_id"]) -> MetaOapg.properties.production_deployment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["development_deployment_id"]) -> MetaOapg.properties.development_deployment_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance_type_name"]) -> MetaOapg.properties.instance_type_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "name", "deployments_count", "production_deployment_id", "development_deployment_id", "instance_type_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        development_deployment_id: typing.Union[MetaOapg.properties.development_deployment_id, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        deployments_count: typing.Union[MetaOapg.properties.deployments_count, decimal.Decimal, int, ],
        instance_type_name: typing.Union[MetaOapg.properties.instance_type_name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        production_deployment_id: typing.Union[MetaOapg.properties.production_deployment_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelV1':
        return super().__new__(
            cls,
            *args,
            development_deployment_id=development_deployment_id,
            name=name,
            created_at=created_at,
            deployments_count=deployments_count,
            instance_type_name=instance_type_name,
            id=id,
            production_deployment_id=production_deployment_id,
            _configuration=_configuration,
            **kwargs,
        )
