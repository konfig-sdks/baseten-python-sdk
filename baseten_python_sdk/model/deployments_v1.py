# coding: utf-8

"""
    Baseten management API

    REST API for management of Baseten resources

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from baseten_python_sdk import schemas  # noqa: F401


class DeploymentsV1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of deployments of a model.
    """


    class MetaOapg:
        required = {
            "deployments",
        }
        
        class properties:
            
            
            class deployments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeploymentV1']:
                        return DeploymentV1
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DeploymentV1'], typing.List['DeploymentV1']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deployments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeploymentV1':
                    return super().__getitem__(i)
            __annotations__ = {
                "deployments": deployments,
            }
    
    deployments: MetaOapg.properties.deployments
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployments"]) -> MetaOapg.properties.deployments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deployments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployments"]) -> MetaOapg.properties.deployments: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deployments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deployments: typing.Union[MetaOapg.properties.deployments, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeploymentsV1':
        return super().__new__(
            cls,
            *args,
            deployments=deployments,
            _configuration=_configuration,
            **kwargs,
        )

from baseten_python_sdk.model.deployment_v1 import DeploymentV1
