# coding: utf-8

"""
    Baseten management API

    REST API for management of Baseten resources

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from baseten_python_sdk import schemas  # noqa: F401


class DeploymentV1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A deployment of a model.
    """


    class MetaOapg:
        required = {
            "autoscaling_settings",
            "is_production",
            "name",
            "active_replica_count",
            "created_at",
            "id",
            "model_id",
            "is_development",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            created_at = schemas.DateTimeSchema
            name = schemas.StrSchema
            model_id = schemas.StrSchema
            is_production = schemas.BoolSchema
            is_development = schemas.BoolSchema
        
            @staticmethod
            def status() -> typing.Type['DeploymentStatusV1']:
                return DeploymentStatusV1
            active_replica_count = schemas.IntSchema
        
            @staticmethod
            def autoscaling_settings() -> typing.Type['AutoscalingSettingsV1']:
                return AutoscalingSettingsV1
            __annotations__ = {
                "id": id,
                "created_at": created_at,
                "name": name,
                "model_id": model_id,
                "is_production": is_production,
                "is_development": is_development,
                "status": status,
                "active_replica_count": active_replica_count,
                "autoscaling_settings": autoscaling_settings,
            }
    
    autoscaling_settings: 'AutoscalingSettingsV1'
    is_production: MetaOapg.properties.is_production
    name: MetaOapg.properties.name
    active_replica_count: MetaOapg.properties.active_replica_count
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id
    model_id: MetaOapg.properties.model_id
    is_development: MetaOapg.properties.is_development
    status: 'DeploymentStatusV1'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_production"]) -> MetaOapg.properties.is_production: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_development"]) -> MetaOapg.properties.is_development: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'DeploymentStatusV1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_replica_count"]) -> MetaOapg.properties.active_replica_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoscaling_settings"]) -> 'AutoscalingSettingsV1': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "name", "model_id", "is_production", "is_development", "status", "active_replica_count", "autoscaling_settings", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_id"]) -> MetaOapg.properties.model_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_production"]) -> MetaOapg.properties.is_production: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_development"]) -> MetaOapg.properties.is_development: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'DeploymentStatusV1': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_replica_count"]) -> MetaOapg.properties.active_replica_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoscaling_settings"]) -> 'AutoscalingSettingsV1': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "created_at", "name", "model_id", "is_production", "is_development", "status", "active_replica_count", "autoscaling_settings", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        autoscaling_settings: 'AutoscalingSettingsV1',
        is_production: typing.Union[MetaOapg.properties.is_production, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        active_replica_count: typing.Union[MetaOapg.properties.active_replica_count, decimal.Decimal, int, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        model_id: typing.Union[MetaOapg.properties.model_id, str, ],
        is_development: typing.Union[MetaOapg.properties.is_development, bool, ],
        status: 'DeploymentStatusV1',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeploymentV1':
        return super().__new__(
            cls,
            *args,
            autoscaling_settings=autoscaling_settings,
            is_production=is_production,
            name=name,
            active_replica_count=active_replica_count,
            created_at=created_at,
            id=id,
            model_id=model_id,
            is_development=is_development,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from baseten_python_sdk.model.autoscaling_settings_v1 import AutoscalingSettingsV1
from baseten_python_sdk.model.deployment_status_v1 import DeploymentStatusV1
